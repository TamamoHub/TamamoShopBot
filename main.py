import os
import telebot
from telebot import types
import random
from collections import defaultdict
from datetime import datetime, timedelta
import requests
import time
import threading


bot = telebot.TeleBot('TELEGRAM_BOT_TOKEN')

products = [{
    "name": "Apple iMac 27",
    "price": "‚Ç¥69,999",
    "discount": "Up to 35% off",
    "rating": 4.8,
    "reviews": 455,
    "delivery": "Fast Delivery",
    "emoji": "üíª",
    "specs": {
        "display": "27-inch Retina 5K",
        "processor": "10th-generation Intel Core i5",
        "memory": "8GB RAM",
        "storage": "256GB SSD"
    }
}, {
    "name": "Apple iPhone 15 Pro Max",
    "price": "‚Ç¥49,999",
    "discount": "Up to 15% off",
    "rating": 4.9,
    "reviews": 1023,
    "delivery": "Best Seller",
    "emoji": "üì±",
    "specs": {
        "display": "6.7-inch Super Retina XDR",
        "processor": "A17 Pro chip",
        "camera": "Pro camera system",
        "battery": "Up to 29 hours video playback"
    }
}, {
    "name": "iPad Pro 13-Inch",
    "price": "‚Ç¥33,999",
    "discount": "Up to 35% off",
    "rating": 4.7,
    "reviews": 789,
    "delivery": "Shipping Today",
    "emoji": "üì±",
    "specs": {
        "display": "13-inch Liquid Retina XDR",
        "processor": "M2 chip",
        "camera": "12MP Ultra Wide front camera",
        "connectivity": "5G capable"
    }
}, {
    "name": "PlayStation 5",
    "price": "‚Ç¥20,999",
    "discount": "Up to 10% off",
    "rating": 4.5,
    "reviews": 364,
    "delivery": "Fast Delivery",
    "emoji": "üéÆ",
    "specs": {
        "processor": "AMD Ryzen Zen 2",
        "gpu": "RDNA 2-based graphics engine",
        "memory": "16GB GDDR6",
        "storage": "825GB SSD"
    }
}, {
    "name": "Xbox Series X",
    "price": "‚Ç¥20,999",
    "discount": "Up to 10% off",
    "rating": 4.5,
    "reviews": 364,
    "delivery": "Best Seller",
    "emoji": "üéÆ",
    "specs": {
        "processor": "AMD Ryzen Zen 2",
        "gpu": "RDNA 2-based graphics engine",
        "memory": "16GB GDDR6",
        "storage": "1TB SSD"
    }
}, {
    "name": "Apple MacBook PRO",
    "price": "‚Ç¥108,999",
    "discount": "Up to 5% off",
    "rating": 4.9,
    "reviews": 556,
    "delivery": "Fast Delivery",
    "emoji": "üíª",
    "specs": {
        "display": "16-inch Retina",
        "processor": "M1 Pro chip",
        "memory": "16GB RAM",
        "storage": "512GB SSD"
    }
}, {
    "name": "Apple Watch SE [GPS 40mm]",
    "price": "‚Ç¥29,999",
    "discount": "Up to 20% off",
    "rating": 4.6,
    "reviews": 542,
    "delivery": "Fast Delivery",
    "emoji": "‚åö",
    "specs": {
        "display": "1.57-inch Retina OLED",
        "processor": "S5 chip",
        "battery": "Up to 18 hours",
        "connectivity": "GPS"
    }
}]

orders = {}
comparison_dict = {}
subscriptions = {}
loyalty_points = {}
user_reviews = {}
product_ratings = {}
active_discounts = {} 
support_user_id = 7501490975
rewards = {
    "discount_5": {"name": "5% –∑–Ω–∏–∂–∫–∞ –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω—É –ø–æ–∫—É–ø–∫—É", "cost": 500, "type": "discount", "value": 5},
    "discount_10": {"name": "10% –∑–Ω–∏–∂–∫–∞ –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω—É –ø–æ–∫—É–ø–∫—É", "cost": 1000, "type": "discount", "value": 10},
    "free_accessory": {"name": "–ï–∫—Å–∫–ª—é–∑–∏–≤–Ω–∏–π –∞–∫—Å–µ—Å—É–∞—Ä —É –ø–æ–¥–∞—Ä—É–Ω–æ–∫", "cost": 2000, "type": "gift"},
    "engraving": {"name": "–Ü–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–µ –≥—Ä–∞–≤—ñ—Ä—É–≤–∞–Ω–Ω—è –Ω–∞ –∞–∫—Å–µ—Å—É–∞—Ä–∞—Ö", "cost": 3000, "type": "service"},
    "early_access": {"name": "–î–æ—Å—Ç—É–ø –¥–æ –Ω–æ–≤–∏–Ω–æ–∫ –Ω–∞ –¥–µ–Ω—å —Ä–∞–Ω—ñ—à–µ", "cost": 5000, "type": "privilege"},
    "virtual_tour": {"name": "–í—ñ—Ä—Ç—É–∞–ª—å–Ω–∞ –µ–∫—Å–∫—É—Ä—Å—ñ—è Apple Store –≤ –ö–∞–ª—ñ—Ñ–æ—Ä–Ω—ñ—ó –∑ –≥—ñ–¥–æ–º", "cost": 10000, "type": "experience"},
    "home_setup": {"name": "–í—ñ–∑–∏—Ç —Ç–µ—Ö–Ω—ñ–∫–∞ –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ç–µ—Ö–Ω—ñ–∫–∏ –≤–¥–æ–º–∞", "cost": 12000, "type": "service"},
    "event_raffle": {"name": "–£—á–∞—Å—Ç—å —É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ –Ω–∞ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è –Ω–∞ –æ—Ñ—ñ—Ü—ñ–π–Ω—É –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü—ñ—é Apple", "cost": 15000, "type": "raffle"},
    "subscription": {"name": "–†—ñ—á–Ω–∞ –ø—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ Apple Music –∞–±–æ Apple TV+", "cost": 20000, "type": "subscription"},
    "insider_club": {"name": "–ß–ª–µ–Ω—Å—Ç–≤–æ –≤ –∫–ª—É–±—ñ 'Apple Insiders' –∑ –¥–æ—Å—Ç—É–ø–æ–º –¥–æ –ø—Ä–∏–≤—ñ–ª–µ—ó–≤ —Ç–∞ –∑–Ω–∏–∂–æ–∫", "cost": 30000, "type": "membership"}
}
promotions = {
    "NEWCLIENT10": {"discount": 10, "name": "–ó–Ω–∏–∂–∫–∞ –Ω–∞ –ø–µ—Ä—à—É –ø–æ–∫—É–ø–∫—É"},
    "AUTUMN20": {"discount": 20, "name": "–û—Å—ñ–Ω–Ω—ñ–π —Ä–æ–∑–ø—Ä–æ–¥–∞–∂"},
    "BLACKFRIDAY": {"discount": 30, "name": "–ß–æ—Ä–Ω–∞ –ø'—è—Ç–Ω–∏—Ü—è"},
    "MARKETING": {"discount": 40, "name": "–Ü–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞—Ä–∫–µ—Ç–∏–Ω–≥"},
    "TAMASHOPBOT": {"discount": 50, "name": "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"}
}
used_promo_codes = defaultdict(set)



@bot.message_handler(commands=['start'])
def send_welcome(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    website_btn = types.KeyboardButton('üåê –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç')
    markup.add(website_btn)
    catalog_btn = types.KeyboardButton('üì± –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä—ñ–≤')
    compare_btn = types.KeyboardButton('üîç –ü–æ—Ä—ñ–≤–Ω—è—Ç–∏ —Ç–æ–≤–∞—Ä–∏')
    discounts_btn = types.KeyboardButton('üí∏ –ó–Ω–∏–∂–∫–∏ —Ç–∞ –∞–∫—Ü—ñ—ó')
    orders_btn = types.KeyboardButton('üì¶ –ú–æ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è')
    subscribe_btn = types.KeyboardButton('üîî –ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è')
    loyalty_btn = types.KeyboardButton('üéÅ –ü—Ä–æ–≥—Ä–∞–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç—ñ')
    reviews_btn = types.KeyboardButton('‚≠ê –í—ñ–¥–≥—É–∫–∏ —Ç–∞ —Ä–µ–π—Ç–∏–Ω–≥–∏')
    support_btn = types.KeyboardButton('üõ†Ô∏è –ü—ñ–¥—Ç—Ä–∏–º–∫–∞')
    share_btn = types.KeyboardButton('üì¢ –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –≤ —Å–æ—Ü–º–µ—Ä–µ–∂–∞—Ö')
    panel_btn = types.KeyboardButton('üîí Panel')
    markup.add(catalog_btn, compare_btn, discounts_btn, orders_btn,
               subscribe_btn, loyalty_btn, reviews_btn, support_btn, share_btn,
               panel_btn)
    bot.send_message(
        message.chat.id,
        "üçè –í—ñ—Ç–∞—î–º–æ –≤ TamaShop! üéâ\n\n–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –∑—ñ —Å–ø–∏—Å–∫—É –Ω–∏–∂—á–µ: üëá",
        reply_markup=markup)
    
@bot.message_handler(func=lambda message: message.text == 'üåê –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç')
def go_to_website(message):
    markup = types.InlineKeyboardMarkup()
    website_button = types.InlineKeyboardButton("–í—ñ–¥–≤—ñ–¥–∞—Ç–∏ –Ω–∞—à —Å–∞–π—Ç", url="https://tamashop.vercel.app/")
    back_button = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
    markup.add(website_button, back_button)
    bot.send_message(message.chat.id, "–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –Ω–∞ –Ω–∞—à —Å–∞–π—Ç! –û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:", reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == 'üîí Panel')
def handle_panel(message):
    user_id = message.from_user.id
    if user_id == 7501490975:
        bot.send_message(message.chat.id,
                         "–í–∏ –º–∞—î—Ç–µ –¥–æ—Å—Ç—É–ø –¥–æ –ø–∞–Ω–µ–ª—ñ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    else:
        bot.send_message(
            message.chat.id,
            "–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ –ø–∞–Ω–µ–ª—ñ. –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.")
        send_welcome(message)


@bot.message_handler(func=lambda message: message.text == 'üì± –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä—ñ–≤')
def show_products(message):
    markup = types.InlineKeyboardMarkup()
    for index, product in enumerate(products):
        button = types.InlineKeyboardButton(
            f"{product['emoji']} {product['name']} - {product['price']}",
            callback_data=f"product_{index}")
        markup.add(button)
    bot.send_message(message.chat.id,
                     "üì¶ –û–±–µ—Ä—ñ—Ç—å —Ç–æ–≤–∞—Ä –∑ –Ω–∞—à–æ–≥–æ —á—É–¥–æ–≤–æ–≥–æ –∞—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç—É: üõçÔ∏è",
                     reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith('product_'))
def show_product_details(call):
    product_index = int(call.data.split('_')[1])
    product = products[product_index]

    markup = types.InlineKeyboardMarkup()
    buy_button = types.InlineKeyboardButton(
        "üõí –ö—É–ø–∏—Ç–∏", callback_data=f"buy_{product_index}")
    review_button = types.InlineKeyboardButton(
        "‚≠ê –ó–∞–ª–∏—à–∏—Ç–∏ –≤—ñ–¥–≥—É–∫", callback_data=f"leave_review_{product_index}")
    share_button = types.InlineKeyboardButton(
        "üì¢ –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è", callback_data=f"share_product_{product_index}")
    back_button = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥",
                                             callback_data="back_to_products")

    markup.add(buy_button, review_button, share_button, back_button)

    bot.edit_message_text(
        f"{product['emoji']} {product['name']}\nüí∞ –¶—ñ–Ω–∞: {product['price']}\nüè∑Ô∏è –ó–Ω–∏–∂–∫–∞: {product['discount']}\n‚≠ê –†–µ–π—Ç–∏–Ω–≥: {product['rating']} ({product['reviews']} –≤—ñ–¥–≥—É–∫—ñ–≤)\nüöö –î–æ—Å—Ç–∞–≤–∫–∞: {product['delivery']}",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=markup)


@bot.callback_query_handler(
    func=lambda call: call.data.startswith('share_product_'))
def share_product(call):
    product_index = int(call.data.split('_')[2])
    product = products[product_index]

    share_text = f"""üöÄ –í–∞—É! –ü–æ–≥–ª—è–Ω—å—Ç–µ –Ω–∞ —Ü–µ–π –Ω–µ–π–º–æ–≤—ñ—Ä–Ω–∏–π —Ç–æ–≤–∞—Ä —É @TamaShop_Bot! üòç

{product['emoji']} {product['name']}
üí∞ –¶—ñ–Ω–∞: {product['price']}
üè∑Ô∏è –ó–Ω–∏–∂–∫–∞: {product['discount']}
‚≠ê –†–µ–π—Ç–∏–Ω–≥: {product['rating']} ({product['reviews']} –≤—ñ–¥–≥—É–∫—ñ–≤)

üõçÔ∏è –ö—É–ø—É–π—Ç–µ –≤ TamaShop - –Ω–∞–π–∫—Ä—É—Ç—ñ—à–æ–º—É –º–∞–≥–∞–∑–∏–Ω—ñ Apple —Ç–µ—Ö–Ω—ñ–∫–∏! üçè‚ú®
–ü—Ä–∏—î–¥–Ω—É–π—Ç–µ—Å—å –¥–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—á–Ω–æ—ó —Ä–µ–≤–æ–ª—é—Ü—ñ—ó –ø—Ä—è–º–æ –∑–∞—Ä–∞–∑! üöÄüåü"""

    markup = types.InlineKeyboardMarkup()
    telegram_button = types.InlineKeyboardButton(
        "Telegram üì¨",
        url=
        f"https://t.me/share/url?url=https://t.me/TamaShopBot&text={share_text}"
    )
    twitter_button = types.InlineKeyboardButton(
        "Twitter üê¶", url=f"https://twitter.com/intent/tweet?text={share_text}")
    facebook_button = types.InlineKeyboardButton(
        "Facebook üë•",
        url=
        f"https://www.facebook.com/sharer/sharer.php?u=https://t.me/TamaShopBot&quote={share_text}"
    )
    back_button = types.InlineKeyboardButton(
        "üîô –ù–∞–∑–∞–¥", callback_data=f"product_{product_index}")

    markup.add(telegram_button, twitter_button, facebook_button, back_button)

    bot.edit_message_text("–û–±–µ—Ä—ñ—Ç—å —Å–æ—Ü—ñ–∞–ª—å–Ω—É –º–µ—Ä–µ–∂—É, —â–æ–± –ø–æ–¥—ñ–ª–∏—Ç–∏—Å—è —Ç–æ–≤–∞—Ä–æ–º:",
                          call.message.chat.id,
                          call.message.message_id,
                          reply_markup=markup)


@bot.callback_query_handler(
    func=lambda call: call.data.startswith('leave_review_'))
def leave_review(call):
    product_index = int(call.data.split('_')[2])
    product = products[product_index]

    markup = types.InlineKeyboardMarkup()
    for i in range(1, 6):
        markup.add(
            types.InlineKeyboardButton(
                f"{i} ‚≠ê", callback_data=f"rate_{product_index}_{i}"))

    bot.edit_message_text(f"–û—Ü—ñ–Ω—ñ—Ç—å {product['emoji']} {product['name']}:",
                          call.message.chat.id,
                          call.message.message_id,
                          reply_markup=markup)

    @bot.message_handler(
        func=lambda message: message.text == 'üîç –ü–æ—Ä—ñ–≤–Ω—è—Ç–∏ —Ç–æ–≤–∞—Ä–∏')
    def compare_products(message):
        comparison_dict[message.chat.id] = []
        markup = types.InlineKeyboardMarkup()
        for index, product in enumerate(products):
            button = types.InlineKeyboardButton(
                f"{product['emoji']} {product['name']}",
                callback_data=f"compare_{index}")
            markup.add(button)
        bot.send_message(message.chat.id,
                         "üîç –û–±–µ—Ä—ñ—Ç—å –ø–µ—Ä—à–∏–π —Ç–æ–≤–∞—Ä –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è:",
                         reply_markup=markup)

    @bot.callback_query_handler(
        func=lambda call: call.data.startswith('compare_'))
    def handle_compare(call):
        product_index = int(call.data.split('_')[1])
        chat_id = call.message.chat.id

        if chat_id not in comparison_dict:
            comparison_dict[chat_id] = []

        comparison_dict[chat_id].append(product_index)

        if len(comparison_dict[chat_id]) == 1:
            markup = types.InlineKeyboardMarkup()
            for index, product in enumerate(products):
                if index != product_index:
                    button = types.InlineKeyboardButton(
                        f"{product['emoji']} {product['name']}",
                        callback_data=f"compare_{index}")
                    markup.add(button)
            bot.edit_message_text(
                f"üîç –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è: {products[product_index]['name']} –∑...",
                chat_id,
                call.message.message_id,
                reply_markup=markup)
        elif len(comparison_dict[chat_id]) == 2:
            show_comparison(call.message, comparison_dict[chat_id])
            comparison_dict[chat_id] = []

    def show_comparison(message, product_indices):
        first_product = products[product_indices[0]]
        second_product = products[product_indices[1]]

        comparison = f"üîç –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è:\n\n"
        comparison += f"{first_product['emoji']} {first_product['name']} vs {second_product['emoji']} {second_product['name']}\n\n"

        comparison += f"üí∞ –¶—ñ–Ω–∞:\n"
        comparison += f"- {first_product['name']}: {first_product['price']}\n"
        comparison += f"- {second_product['name']}: {second_product['price']}\n\n"

        comparison += f"üè∑Ô∏è –ó–Ω–∏–∂–∫–∞:\n"
        comparison += f"- {first_product['name']}: {first_product['discount']}\n"
        comparison += f"- {second_product['name']}: {second_product['discount']}\n\n"

        comparison += f"‚≠ê –†–µ–π—Ç–∏–Ω–≥:\n"
        comparison += f"- {first_product['name']}: {first_product['rating']} ({first_product['reviews']} –≤—ñ–¥–≥—É–∫—ñ–≤)\n"
        comparison += f"- {second_product['name']}: {second_product['rating']} ({second_product['reviews']} –≤—ñ–¥–≥—É–∫—ñ–≤)\n\n"

        comparison += f"üöö –î–æ—Å—Ç–∞–≤–∫–∞:\n"
        comparison += f"- {first_product['name']}: {first_product['delivery']}\n"
        comparison += f"- {second_product['name']}: {second_product['delivery']}\n\n"

        comparison += f"üìä –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:\n"
        all_specs = set(first_product['specs'].keys()) | set(
            second_product['specs'].keys())
        for spec in all_specs:
            comparison += f"{spec.capitalize()}:\n"
            comparison += f"- {first_product['name']}: {first_product['specs'].get(spec, 'N/A')}\n"
            comparison += f"- {second_product['name']}: {second_product['specs'].get(spec, 'N/A')}\n\n"

        markup = types.InlineKeyboardMarkup()
        back_button = types.InlineKeyboardButton(
            "üîô –ù–∞–∑–∞–¥ –¥–æ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è", callback_data="back_to_compare")
        markup.add(back_button)

        bot.edit_message_text(comparison,
                              message.chat.id,
                              message.message_id,
                              reply_markup=markup)

    @bot.callback_query_handler(
        func=lambda call: call.data == "back_to_compare")
    def back_to_compare(call):
        compare_products(call.message)


# –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –¥–æ —Å–ø–∏—Å–∫—É –ø—Ä–æ–¥—É–∫—Ç—ñ–≤
@bot.callback_query_handler(func=lambda call: call.data == "back_to_products")
def back_to_products(call):
    markup = types.InlineKeyboardMarkup()
    for index, product in enumerate(products):
        button = types.InlineKeyboardButton(
            f"{product['emoji']} {product['name']} - {product['price']}",
            callback_data=f"product_{index}")
        markup.add(button)
    bot.edit_message_text("üì¶ –û–±–µ—Ä—ñ—Ç—å —Ç–æ–≤–∞—Ä –∑ –Ω–∞—à–æ–≥–æ —á—É–¥–æ–≤–æ–≥–æ –∞—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç—É: üõçÔ∏è",
                          call.message.chat.id,
                          call.message.message_id,
                          reply_markup=markup)


# –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ "–ö—É–ø–∏—Ç–∏"
@bot.callback_query_handler(func=lambda call: call.data.startswith('buy_'))
def handle_purchase(call):
    try:
        product_index = int(call.data.split('_')[1])
        product = products[product_index]

        markup = types.InlineKeyboardMarkup()
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤
        user_id = call.from_user.id
        for code, promo in promotions.items():
            if code not in used_promo_codes[user_id]:
                button_text = f"{code} ({promo['discount']}% –∑–Ω–∏–∂–∫–∏)"
                callback_data = f"apply_promo_{product_index}_{code}"
                markup.add(types.InlineKeyboardButton(button_text, callback_data=callback_data))
        
        # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–Ω–∏–∂–∫–∏ –∑ –ø—Ä–æ–≥—Ä–∞–º–∏ –ª–æ—è–ª—å–Ω–æ—Å—Ç—ñ, —è–∫—â–æ –≤–æ–Ω–∞ —î
        if user_id in active_discounts:
            loyalty_discount = active_discounts[user_id]
            button_text = f"–ó–Ω–∏–∂–∫–∞ –∑ –ø—Ä–æ–≥—Ä–∞–º–∏ –ª–æ—è–ª—å–Ω–æ—Å—Ç—ñ ({loyalty_discount}%)"
            callback_data = f"apply_loyalty_discount_{product_index}"
            markup.add(types.InlineKeyboardButton(button_text, callback_data=callback_data))
        
        # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É "–ë–µ–∑ –ø—Ä–æ–º–æ–∫–æ–¥—É"
        skip_promo_button = types.InlineKeyboardButton("–ë–µ–∑ –ø—Ä–æ–º–æ–∫–æ–¥—É", callback_data=f"skip_promo_{product_index}")
        markup.add(skip_promo_button)

        bot.edit_message_text(
            f"–í–∏–±–µ—Ä—ñ—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ {product['emoji']} {product['name']} –∞–±–æ –ø—Ä–æ–¥–æ–≤–∂—ñ—Ç—å –±–µ–∑ –∑–Ω–∏–∂–∫–∏:",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup
        )
    except (IndexError, ValueError):
        bot.send_message(
            call.message.chat.id,
            "‚ùå –û–π! –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. üòï –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑. üîÑ")
        
@bot.callback_query_handler(func=lambda call: call.data.startswith('apply_loyalty_discount_'))
def apply_loyalty_discount(call):
    product_index = int(call.data.split('_')[3])  # –Ü–Ω–¥–µ–∫—Å –ø—Ä–æ–¥—É–∫—Ç—É
    user_id = call.from_user.id
    
    if user_id in active_discounts:
        # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –∑–Ω–∏–∂–∫—É –∑ –ø—Ä–æ–≥—Ä–∞–º–∏ –ª–æ—è–ª—å–Ω–æ—Å—Ç—ñ
        discount = active_discounts[user_id]
        complete_purchase(call.message, product_index, discount, promo_code=None)
    else:
        bot.answer_callback_query(call.id, "–ó–Ω–∏–∂–∫–∞ –∑ –ø—Ä–æ–≥—Ä–∞–º–∏ –ª–æ—è–ª—å–Ω–æ—Å—Ç—ñ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")



@bot.callback_query_handler(func=lambda call: call.data.startswith('apply_promo_'))
def apply_promo_code(call):
    data_parts = call.data.split('_')
    product_index = data_parts[2]  # –Ü–Ω–¥–µ–∫—Å –ø—Ä–æ–¥—É–∫—Ç—É
    promo_code = "_".join(data_parts[3:])  # –ó–∞–ª–∏—à–æ–∫ –¥–∞–Ω–∏—Ö –æ–±'—î–¥–Ω—É—î—Ç—å—Å—è –≤ –ø—Ä–æ–º–æ–∫–æ–¥
    user_id = call.from_user.id
    
    if promo_code in promotions and promo_code not in used_promo_codes[user_id]:
        discount = promotions[promo_code]["discount"]
        used_promo_codes[user_id].add(promo_code)
        complete_purchase(call.message, int(product_index), discount, promo_code)
    else:
        bot.answer_callback_query(call.id, "–¶–µ–π –ø—Ä–æ–º–æ–∫–æ–¥ –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∏–π –∞–±–æ –Ω–µ–¥—ñ–π—Å–Ω–∏–π.")
        complete_purchase(call.message, int(product_index), 0, None)

@bot.callback_query_handler(func=lambda call: call.data.startswith('skip_promo_'))
def skip_promo(call):
    product_index = int(call.data.split('_')[2])
    bot.answer_callback_query(call.id)
    complete_purchase(call.message, product_index, 0, None)

def complete_purchase(message, product_index, discount, promo_code):
    user_id = message.chat.id
    product = products[product_index]
    original_price = float(product['price'].replace('‚Ç¥', '').replace(',', ''))
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–∫—Ç–∏–≤–Ω–∞ –∑–Ω–∏–∂–∫–∞ –∑ –ø—Ä–æ–≥—Ä–∞–º–∏ –ª–æ—è–ª—å–Ω–æ—Å—Ç—ñ
    loyalty_discount = active_discounts.get(user_id, 0)
    
    # –Ø–∫—â–æ —î –ø—Ä–æ–º–æ–∫–æ–¥ —ñ –∑–Ω–∏–∂–∫–∞ –∑ –ª–æ—è–ª—å–Ω–æ—Å—Ç—ñ, –ø–æ—î–¥–Ω—É—î–º–æ —ó—Ö
    total_discount = discount + loyalty_discount
    
    # –û–±–º–µ–∂—É—î–º–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –∑–Ω–∏–∂–∫—É, —â–æ–± –Ω–µ –ø–µ—Ä–µ–≤–∏—â—É–≤–∞—Ç–∏ 100%
    total_discount = min(total_discount, 100)
    
    # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –∫—ñ–Ω—Ü–µ–≤—É —Ü—ñ–Ω—É
    discounted_price = original_price * (1 - total_discount / 100)
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    if user_id not in orders:
        orders[user_id] = []
    orders[user_id].append(product)

    # –î–æ–¥–∞—î–º–æ –±–∞–ª–∏ –ª–æ—è–ª—å–Ω–æ—Å—Ç—ñ
    if user_id not in loyalty_points:
        loyalty_points[user_id] = 0
    loyalty_points[user_id] += int(discounted_price * 0.01)

    promo_info = f"–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∏–π –ø—Ä–æ–º–æ–∫–æ–¥: {promo_code}\n" if promo_code else ""
    loyalty_info = f"–ó–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ –∑–Ω–∏–∂–∫—É {loyalty_discount}% –≤—ñ–¥ –ø—Ä–æ–≥—Ä–∞–º–∏ –ª–æ—è–ª—å–Ω–æ—Å—Ç—ñ.\n" if loyalty_discount else ""

    # –í–∏–¥–∞–ª—è—î–º–æ –∞–∫—Ç–∏–≤–Ω—É –∑–Ω–∏–∂–∫—É –ø—ñ—Å–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
    if user_id in active_discounts:
        del active_discounts[user_id]
    
    bot.send_message(
        message.chat.id,
        f"üéâ –í—ñ—Ç–∞—î–º–æ –∑ –ø–æ–∫—É–ø–∫–æ—é {product['emoji']} {product['name']}!\n"
        f"–û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∞ —Ü—ñ–Ω–∞: ‚Ç¥{original_price:.2f}\n"
        f"{promo_info}"
        f"{loyalty_info}"
        f"–ó–Ω–∏–∂–∫–∞: {total_discount}%\n"
        f"–§—ñ–Ω–∞–ª—å–Ω–∞ —Ü—ñ–Ω–∞: ‚Ç¥{discounted_price:.2f}\n\n"
        f"–¢–æ–≤–∞—Ä –¥–æ–¥–∞–Ω–æ –¥–æ –≤–∞—à–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å. üì¶‚ú®\n"
        f"–í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ {int(discounted_price * 0.01)} –±–∞–ª—ñ–≤ –ª–æ—è–ª—å–Ω–æ—Å—Ç—ñ! üéÅ"
    )


# –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ—Ä—ñ–≤–Ω—è—Ç–∏ —Ç–æ–≤–∞—Ä–∏"
@bot.message_handler(func=lambda message: message.text == 'üîç –ü–æ—Ä—ñ–≤–Ω—è—Ç–∏ —Ç–æ–≤–∞—Ä–∏')
def compare_products(message):
    comparison_dict[message.chat.id] = []  # –û—á–∏—â–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –≤–∏–±—ñ—Ä
    markup = types.InlineKeyboardMarkup()
    for index, product in enumerate(products):
        button = types.InlineKeyboardButton(
            f"{product['emoji']} {product['name']}",
            callback_data=f"compare_{index}")
        markup.add(button)
    bot.send_message(message.chat.id,
                     "üîç –û–±–µ—Ä—ñ—Ç—å –ø–µ—Ä—à–∏–π —Ç–æ–≤–∞—Ä –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è:",
                     reply_markup=markup)


# –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —Ç–æ–≤–∞—Ä—ñ–≤ –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
@bot.callback_query_handler(func=lambda call: call.data.startswith('compare_'))
def handle_compare(call):
    product_index = int(call.data.split('_')[1])
    chat_id = call.message.chat.id

    if chat_id not in comparison_dict:
        comparison_dict[chat_id] = []

    comparison_dict[chat_id].append(product_index)

    if len(comparison_dict[chat_id]) == 1:
        # –í–∏–±—ñ—Ä –¥—Ä—É–≥–æ–≥–æ —Ç–æ–≤–∞—Ä—É
        markup = types.InlineKeyboardMarkup()
        for index, product in enumerate(products):
            if index != product_index:
                button = types.InlineKeyboardButton(
                    f"{product['emoji']} {product['name']}",
                    callback_data=f"compare_{index}")
                markup.add(button)
        bot.edit_message_text(
            f"üîç –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è: {products[product_index]['name']} –∑...",
            chat_id,
            call.message.message_id,
            reply_markup=markup)
    elif len(comparison_dict[chat_id]) == 2:
        # –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
        show_comparison(call.message, comparison_dict[chat_id])
        comparison_dict[chat_id] = []  # –û—á–∏—â–∞—î–º–æ –≤–∏–±—ñ—Ä –ø—ñ—Å–ª—è –ø–æ–∫–∞–∑—É –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è


def show_comparison(message, product_indices):
    first_product = products[product_indices[0]]
    second_product = products[product_indices[1]]

    comparison = f"üîç –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è:\n\n"
    comparison += f"{first_product['emoji']} {first_product['name']} vs {second_product['emoji']} {second_product['name']}\n\n"

    # –ü–æ—Ä—ñ–≤–Ω—é—î–º–æ —Ü—ñ–Ω–∏
    comparison += f"üí∞ –¶—ñ–Ω–∞:\n"
    comparison += f"- {first_product['name']}: {first_product['price']}\n"
    comparison += f"- {second_product['name']}: {second_product['price']}\n\n"

    # –ü–æ—Ä—ñ–≤–Ω—é—î–º–æ –∑–Ω–∏–∂–∫–∏
    comparison += f"üè∑Ô∏è –ó–Ω–∏–∂–∫–∞:\n"
    comparison += f"- {first_product['name']}: {first_product['discount']}\n"
    comparison += f"- {second_product['name']}: {second_product['discount']}\n\n"

    # –ü–æ—Ä—ñ–≤–Ω—é—î–º–æ —Ä–µ–π—Ç–∏–Ω–≥–∏
    comparison += f"‚≠ê –†–µ–π—Ç–∏–Ω–≥:\n"
    comparison += f"- {first_product['name']}: {first_product['rating']} ({first_product['reviews']} –≤—ñ–¥–≥—É–∫—ñ–≤)\n"
    comparison += f"- {second_product['name']}: {second_product['rating']} ({second_product['reviews']} –≤—ñ–¥–≥—É–∫—ñ–≤)\n\n"

    # –ü–æ—Ä—ñ–≤–Ω—é—î–º–æ –¥–æ—Å—Ç–∞–≤–∫—É
    comparison += f"üöö –î–æ—Å—Ç–∞–≤–∫–∞:\n"
    comparison += f"- {first_product['name']}: {first_product['delivery']}\n"
    comparison += f"- {second_product['name']}: {second_product['delivery']}\n\n"

    # –ü–æ—Ä—ñ–≤–Ω—é—î–º–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    comparison += f"üìä –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:\n"
    all_specs = set(first_product['specs'].keys()) | set(
        second_product['specs'].keys())
    for spec in all_specs:
        comparison += f"{spec.capitalize()}:\n"
        comparison += f"- {first_product['name']}: {first_product['specs'].get(spec, 'N/A')}\n"
        comparison += f"- {second_product['name']}: {second_product['specs'].get(spec, 'N/A')}\n\n"

    markup = types.InlineKeyboardMarkup()
    back_button = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è",
                                             callback_data="back_to_compare")
    markup.add(back_button)

    bot.edit_message_text(comparison,
                          message.chat.id,
                          message.message_id,
                          reply_markup=markup)


# –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –¥–æ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è"
@bot.callback_query_handler(func=lambda call: call.data == "back_to_compare")
def back_to_compare(call):
    compare_products(call.message)


# –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è"
@bot.message_handler(
    func=lambda message: message.text == 'üîî –ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è')
def subscribe_to_updates(message):
    if message.chat.id not in subscriptions:
        subscriptions[message.chat.id] = set()

    markup = types.InlineKeyboardMarkup()
    options = ['–ù–æ–≤—ñ –ø—Ä–æ–¥—É–∫—Ç–∏', '–ó–Ω–∏–∂–∫–∏', '–í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ø–∞—Å—ñ–≤']
    for option in options:
        if option in subscriptions[message.chat.id]:
            button = types.InlineKeyboardButton(
                f"‚úÖ {option}", callback_data=f"unsub_{option}")
        else:
            button = types.InlineKeyboardButton(f"üîî {option}",
                                                callback_data=f"sub_{option}")
        markup.add(button)

    bot.send_message(message.chat.id,
                     "üîî –û–±–µ—Ä—ñ—Ç—å, –Ω–∞ —è–∫—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–∏ —Ö–æ—á–µ—Ç–µ –ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è:",
                     reply_markup=markup)


# –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ó–Ω–∏–∂–∫–∏ —Ç–∞ –∞–∫—Ü—ñ—ó"
@bot.message_handler(func=lambda message: message.text == 'üí∏ –ó–Ω–∏–∂–∫–∏ —Ç–∞ –∞–∫—Ü—ñ—ó')
def show_discounts_and_promotions(message):
    user_id = message.from_user.id
    response = "üéâ –î–æ—Å—Ç—É–ø–Ω—ñ –∑–Ω–∏–∂–∫–∏ —Ç–∞ –∞–∫—Ü—ñ—ó:\n\n"
    
    available_promos = [code for code in promotions if code not in used_promo_codes[user_id]]
    
    if available_promos:
        for code in available_promos:
            promo = promotions[code]
            response += f"üè∑Ô∏è {promo['name']}\n"
            response += f"   {promo['discount']}% –∑–Ω–∏–∂–∫–∏\n"
            response += f"   –ö–æ–¥: {code}\n\n"
    else:
        response += "–ù–∞ –∂–∞–ª—å, —É –≤–∞—Å –∑–∞—Ä–∞–∑ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤. üòî\n"
        response += "–°–ª—ñ–¥–∫—É–π—Ç–µ –∑–∞ –Ω–∞—à–∏–º–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º–∏, —â–æ–± –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –Ω–æ–≤—ñ –∞–∫—Ü—ñ—ó! üéÅ"

    bot.send_message(message.chat.id, response)


# –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ú–æ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"
@bot.message_handler(func=lambda message: message.text == 'üì¶ –ú–æ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è')
def show_my_orders(message):
    user_id = message.chat.id
    if user_id not in orders or not orders[user_id]:
        bot.send_message(user_id, "–£ –≤–∞—Å –ø–æ–∫–∏ –Ω–µ–º–∞—î –∑–∞–º–æ–≤–ª–µ–Ω—å. üõí")
        return

    response = "üì¶ –í–∞—à—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n\n"
    for index, order in enumerate(orders[user_id], 1):
        response += f"{index}. {order['emoji']} {order['name']} - {order['price']}\n"

    bot.send_message(user_id, response)


@bot.message_handler(
    func=lambda message: message.text == 'üì¢ –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –≤ —Å–æ—Ü–º–µ—Ä–µ–∂–∞—Ö')
def share_in_social_media(message):
    markup = types.InlineKeyboardMarkup()
    for index, product in enumerate(products):
        button = types.InlineKeyboardButton(
            f"{product['emoji']} {product['name']}",
            callback_data=f"share_product_{index}")
        markup.add(button)
    shop_button = types.InlineKeyboardButton("üè™ –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –º–∞–≥–∞–∑–∏–Ω–æ–º",
                                             callback_data="share_shop")
    markup.add(shop_button)

    bot.send_message(message.chat.id,
                     "üì± –û–±–µ—Ä—ñ—Ç—å —Ç–æ–≤–∞—Ä –¥–ª—è –ø–æ—à–∏—Ä–µ–Ω–Ω—è –∞–±–æ –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è –º–∞–≥–∞–∑–∏–Ω–æ–º:",
                     reply_markup=markup)


@bot.callback_query_handler(
    func=lambda call: call.data.startswith('share_product_'))
def share_product(call):
    product_index = int(call.data.split('_')[2])
    product = products[product_index]

    share_text = f"""üöÄ –í–∞—É! –ü–æ–≥–ª—è–Ω—å—Ç–µ –Ω–∞ —Ü–µ–π –Ω–µ–π–º–æ–≤—ñ—Ä–Ω–∏–π —Ç–æ–≤–∞—Ä —É @TamaShop_Bot! üòç

{product['emoji']} {product['name']}
üí∞ –¶—ñ–Ω–∞: {product['price']}
üè∑Ô∏è –ó–Ω–∏–∂–∫–∞: {product['discount']}
‚≠ê –†–µ–π—Ç–∏–Ω–≥: {product['rating']} ({product['reviews']} –≤—ñ–¥–≥—É–∫—ñ–≤)

üõçÔ∏è –ö—É–ø—É–π—Ç–µ –≤ TamaShop - –Ω–∞–π–∫—Ä—É—Ç—ñ—à–æ–º—É –º–∞–≥–∞–∑–∏–Ω—ñ Apple —Ç–µ—Ö–Ω—ñ–∫–∏! üçè‚ú®
–ü—Ä–∏—î–¥–Ω—É–π—Ç–µ—Å—å –¥–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—á–Ω–æ—ó —Ä–µ–≤–æ–ª—é—Ü—ñ—ó –ø—Ä—è–º–æ –∑–∞—Ä–∞–∑! üöÄüåü"""

    markup = types.InlineKeyboardMarkup()
    telegram_button = types.InlineKeyboardButton(
        "Telegram üì¨",
        url=
        f"https://t.me/share/url?url=https://t.me/TamaShopBot&text={share_text}"
    )
    twitter_button = types.InlineKeyboardButton(
        "Twitter üê¶", url=f"https://twitter.com/intent/tweet?text={share_text}")
    facebook_button = types.InlineKeyboardButton(
        "Facebook üë•",
        url=
        f"https://www.facebook.com/sharer/sharer.php?u=https://t.me/TamaShopBot&quote={share_text}"
    )

    markup.add(telegram_button, twitter_button, facebook_button)

    bot.edit_message_text("–û–±–µ—Ä—ñ—Ç—å —Å–æ—Ü—ñ–∞–ª—å–Ω—É –º–µ—Ä–µ–∂—É, —â–æ–± –ø–æ–¥—ñ–ª–∏—Ç–∏—Å—è —Ç–æ–≤–∞—Ä–æ–º:",
                          call.message.chat.id,
                          call.message.message_id,
                          reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == 'share_shop')
def share_shop(call):
    share_text = """üéâ –í–∞—É! –í–∏ –≤–∂–µ —á—É–ª–∏ –ø—Ä–æ TamaShop? üõçÔ∏è

üèÜ –¶–µ –Ω–∞–π–∫—Ä—É—Ç—ñ—à–∏–π –º–∞–≥–∞–∑–∏–Ω Apple —Ç–µ—Ö–Ω—ñ–∫–∏, –¥–µ –≤–∏ –∑–Ω–∞–π–¥–µ—Ç–µ:
   üçè –ù–∞–π–Ω–æ–≤—ñ—à—ñ iPhone, iPad, MacBook
   üíº –ù–µ–ø–µ—Ä–µ–≤–µ—Ä—à–µ–Ω—ñ –∞–∫—Å–µ—Å—É–∞—Ä–∏
   üöÄ –Ü–Ω–Ω–æ–≤–∞—Ü—ñ–π–Ω—ñ –≥–∞–¥–∂–µ—Ç–∏

üí∞ –ù–µ–π–º–æ–≤—ñ—Ä–Ω—ñ —Ü—ñ–Ω–∏ —Ç–∞ —à–∞–ª–µ–Ω—ñ –∑–Ω–∏–∂–∫–∏! üè∑Ô∏è
‚ö° –ë–ª–∏—Å–∫–∞–≤–∏—á–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –≤—Å—ñ–π –∫—Ä–∞—ó–Ω—ñ! üöö
üåü –ë–µ–∑–¥–æ–≥–∞–Ω–Ω–∏–π —Å–µ—Ä–≤—ñ—Å —Ç–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞ 24/7! üë®‚Äçüíª

–ü—Ä–∏—î–¥–Ω—É–π—Ç–µ—Å—å –¥–æ —Ü–∏—Ñ—Ä–æ–≤–æ—ó —Ä–µ–≤–æ–ª—é—Ü—ñ—ó –∑ TamaShop! üöÄ‚ú®
üëâ https://t.me/TamaShopBot"""

    markup = types.InlineKeyboardMarkup()
    telegram_button = types.InlineKeyboardButton(
        "Telegram üì¨",
        url=
        f"https://t.me/share/url?url=https://t.me/TamaShopBot&text={share_text}"
    )
    twitter_button = types.InlineKeyboardButton(
        "Twitter üê¶", url=f"https://twitter.com/intent/tweet?text={share_text}")
    facebook_button = types.InlineKeyboardButton(
        "Facebook üë•",
        url=
        f"https://www.facebook.com/sharer/sharer.php?u=https://t.me/TamaShopBot&quote={share_text}"
    )

    markup.add(telegram_button, twitter_button, facebook_button)

    bot.edit_message_text(
        "–û–±–µ—Ä—ñ—Ç—å —Å–æ—Ü—ñ–∞–ª—å–Ω—É –º–µ—Ä–µ–∂—É, —â–æ–± –ø–æ–¥—ñ–ª–∏—Ç–∏—Å—è –º–∞–≥–∞–∑–∏–Ω–æ–º:",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=markup)


# –û–±—Ä–æ–±–∫–∞ –ø—ñ–¥–ø–∏—Å–∫–∏/–≤—ñ–¥–ø–∏—Å–∫–∏
@bot.callback_query_handler(func=lambda call: call.data.startswith('sub_') or
                            call.data.startswith('unsub_'))
def handle_subscription(call):
    action, option = call.data.split('_')

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î —á–∞—Ç —É subscriptions, —è–∫—â–æ –Ω—ñ, —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –π–æ–≥–æ
    if call.message.chat.id not in subscriptions:
        subscriptions[call.message.chat.id] = set()

    if action == 'sub':
        subscriptions[call.message.chat.id].add(option)
        bot.answer_callback_query(call.id,
                                  f"‚úÖ –í–∏ –ø—ñ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {option}")
    else:
        subscriptions[call.message.chat.id].remove(option)
        bot.answer_callback_query(call.id,
                                  f"‚ùå –í–∏ –≤—ñ–¥–ø–∏—Å–∞–ª–∏—Å—å –≤—ñ–¥ –æ–Ω–æ–≤–ª–µ–Ω—å: {option}")

    # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∞–∫—Ç—É–∞–ª—å–Ω–∏–º–∏ –ø—ñ–¥–ø–∏—Å–∫–∞–º–∏
    markup = types.InlineKeyboardMarkup()
    options = ['–ù–æ–≤—ñ –ø—Ä–æ–¥—É–∫—Ç–∏', '–ó–Ω–∏–∂–∫–∏', '–í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ø–∞—Å—ñ–≤']
    for opt in options:
        if opt in subscriptions[call.message.chat.id]:
            button = types.InlineKeyboardButton(f"‚úÖ {opt}",
                                                callback_data=f"unsub_{opt}")
        else:
            button = types.InlineKeyboardButton(f"üîî {opt}",
                                                callback_data=f"sub_{opt}")
        markup.add(button)

    bot.edit_message_reply_markup(call.message.chat.id,
                                   call.message.message_id,
                                   reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == 'üéÅ –í–∏—Ç—Ä–∞—Ç–∏—Ç–∏ –±–∞–ª–∏')
def show_available_rewards(message):
    user_id = message.from_user.id
    
    if message.chat.id not in loyalty_points:
        loyalty_points[message.chat.id] = 0

    user_points = loyalty_points[message.chat.id]
    
    # –§–æ—Ä–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    response = f"üéÅ –î–æ—Å—Ç—É–ø–Ω—ñ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏ (—É –≤–∞—Å {user_points} –±–∞–ª—ñ–≤):\n\n"
    
    markup = types.InlineKeyboardMarkup()
    
    # –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –±–∞–ª—ñ–≤
    for reward_id, reward in rewards.items():
        if user_points >= reward['cost']:
            response += f"‚úÖ {reward['name']} - {reward['cost']} –±–∞–ª—ñ–≤\n"
            button = types.InlineKeyboardButton(f"{reward['name']} ({reward['cost']} –±–∞–ª—ñ–≤)", callback_data=f"redeem_{reward_id}")
            markup.add(button)
        else:
            response += f"‚ùå {reward['name']} - {reward['cost']} –±–∞–ª—ñ–≤ (–Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –±–∞–ª—ñ–≤)\n"
    
    response += "\n–û–±–µ—Ä—ñ—Ç—å –≤–∏–Ω–∞–≥–æ—Ä–æ–¥—É, —è–∫—É —Ö–æ—á–µ—Ç–µ –æ—Ç—Ä–∏–º–∞—Ç–∏:"
    
    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    bot.send_message(message.chat.id, response, reply_markup=markup)



# –î–æ–¥–∞–π—Ç–µ —Ü—é —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –≤–∏–±–æ—Ä—É –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏
@bot.callback_query_handler(func=lambda call: call.data.startswith('redeem_'))
def handle_reward_redemption(call):
    user_id = call.from_user.id
    reward_id = call.data.split('redeem_')[1]
    
    if reward_id in rewards:
        reward = rewards[reward_id]
        if loyalty_points[user_id] >= reward['cost']:
            loyalty_points[user_id] -= reward['cost']
            
            # –õ–æ–≥—ñ–∫–∞ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥
            if reward['type'] == 'discount':
                # –î–æ–¥–∞—î–º–æ –∑–Ω–∏–∂–∫—É –¥–æ –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–Ω–∏–∂–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                active_discounts[user_id] = reward['value']
                response = f"üéâ –í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ {reward['value']}% –∑–Ω–∏–∂–∫—É –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω—É –ø–æ–∫—É–ø–∫—É!"
            elif reward['type'] == 'gift':
                response = f"üéÅ –í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ –ø–æ–¥–∞—Ä—É–Ω–æ–∫: {reward['name']}! –ú–∏ –∑–≤'—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π."
            elif reward['type'] == 'service':
                response = f"üõ†Ô∏è –í–∏ –∑–∞–º–æ–≤–∏–ª–∏ –ø–æ—Å–ª—É–≥—É: {reward['name']}. –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –¥–ª—è —É–∑–≥–æ–¥–∂–µ–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π."
            elif reward['type'] == 'privilege':
                response = f"üåü –í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ –ø—Ä–∏–≤—ñ–ª–µ–π: {reward['name']}. –°–ª—ñ–¥–∫—É–π—Ç–µ –∑–∞ –Ω–∞—à–∏–º–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º–∏!"
            elif reward['type'] == 'experience':
                response = f"üåà –í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ –¥–æ—Å—Ç—É–ø –¥–æ: {reward['name']}. –û—á—ñ–∫—É–π—Ç–µ –ø–æ–¥–∞–ª—å—à–∏—Ö —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π –Ω–∞ –≤–∞—à—É –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –ø–æ—à—Ç—É."
            elif reward['type'] == 'raffle':
                response = f"üé´ –í–∏ –≤–∑—è–ª–∏ —É—á–∞—Å—Ç—å —É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ: {reward['name']}. –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –±—É–¥—É—Ç—å –æ–≥–æ–ª–æ—à–µ–Ω—ñ –Ω–µ–∑–∞–±–∞—Ä–æ–º!"
            elif reward['type'] == 'subscription':
                response = f"üì± –í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏: {reward['name']}. –ö–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –±—É–¥–µ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –≤–∞–º –ø—Ä–æ—Ç—è–≥–æ–º 24 –≥–æ–¥–∏–Ω."
            elif reward['type'] == 'membership':
                response = f"üèÖ –í—ñ—Ç–∞—î–º–æ! –í–∏ —Å—Ç–∞–ª–∏ —á–ª–µ–Ω–æ–º: {reward['name']}. –î–µ—Ç–∞–ª—ñ –ø—Ä–æ –≤–∞—à–µ —á–ª–µ–Ω—Å—Ç–≤–æ –±—É–¥—É—Ç—å –Ω–∞–¥—ñ—Å–ª–∞–Ω—ñ –Ω–∞ –≤–∞—à—É –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –ø–æ—à—Ç—É."
            else:
                response = f"üéâ –í–∏ —É—Å–ø—ñ—à–Ω–æ –æ–±–º—ñ–Ω—è–ª–∏ –±–∞–ª–∏ –Ω–∞: {reward['name']}!"
            
            response += f"\n\n–ó–∞–ª–∏—à–æ–∫ –±–∞–ª—ñ–≤: {loyalty_points[user_id]}"
            
            bot.answer_callback_query(call.id, "–í–∏–Ω–∞–≥–æ—Ä–æ–¥—É —É—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω–æ!")
            bot.edit_message_text(response, call.message.chat.id, call.message.message_id)
        else:
            bot.answer_callback_query(call.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –±–∞–ª—ñ–≤ –¥–ª—è —Ü—ñ—î—ó –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏!", show_alert=True)
    else:
        bot.answer_callback_query(call.id, "–ü–æ–º–∏–ª–∫–∞: –≤–∏–Ω–∞–≥–æ—Ä–æ–¥—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)



# –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–≥—Ä–∞–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç—ñ"
@bot.message_handler(func=lambda message: message.text == 'üéÅ –ü—Ä–æ–≥—Ä–∞–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç—ñ')
def show_loyalty_program(message):
    if message.chat.id not in loyalty_points:
        loyalty_points[message.chat.id] = 0

    points = loyalty_points[message.chat.id]
    level = ("–ù–æ–≤–∞—á–æ–∫ ü•â" if points < 500 else "–£—á–∞—Å–Ω–∏–∫ üìú" if points < 1000 else "–ü–æ—á–∞—Ç–∫—ñ–≤–µ—Ü—å üíº" if points < 1500 else "–ü—Ä–æ—Å—É–Ω—É—Ç–∏–π ü•à" if points < 2500 else "–ó–Ω–∞–≤–µ—Ü—å üéñÔ∏è" if points < 4000 else "–ï–∫—Å–ø–µ—Ä—Ç ü•á" if points < 6000 else "–ü—Ä–æ—Ñ–µ—Å—ñ–æ–Ω–∞–ª üî∞" if points < 8000 else "–ú–∞–π—Å—Ç–µ—Ä üåü" if points < 10000 else "–ì—É—Ä—É üßò‚Äç‚ôÇÔ∏è" if points < 15000 else "–õ–µ–≥–µ–Ω–¥–∞ üî±" if points < 20000 else "VIP üëë" if points < 30000 else "–ö–æ—Ä–æ–ª—å Apple-—Ç–µ—Ö–Ω—ñ–∫–∏ üëëüçé" if points < 50000 else "–ë–æ–≥ “ê–∞–¥–∂–µ—Ç—ñ–≤ üõ°Ô∏è‚öîÔ∏è" if points < 75000 else "–ê–±—Å–æ–ª—é—Ç–Ω–∏–π –ü–æ–∫—É–ø–µ—Ü—å üöÄ" if points < 100000 else "–ö–æ—Å–º—ñ—á–Ω–∏–π –ü–æ–∫—É–ø–µ—Ü—å üåå")

    response = f"üéÅ –í–∞—à–∞ –ø—Ä–æ–≥—Ä–∞–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç—ñ:\n\n"
    response += f"üåü –†—ñ–≤–µ–Ω—å: {level}\n"
    response += f"üíé –ë–∞–ª–∏: {points}\n\n"
    response += "üéâ –°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó:\n"
    
    for reward in rewards.values():
        response += f"‚≠êÔ∏è {reward['cost']} –±–∞–ª—ñ–≤: {reward['name']}\n"

    markup = types.InlineKeyboardMarkup()
    spend_points_button = types.InlineKeyboardButton("üéÅ –í–∏—Ç—Ä–∞—Ç–∏—Ç–∏ –±–∞–ª–∏", callback_data="spend_points")
    markup.add(spend_points_button)

    bot.send_message(message.chat.id, response, reply_markup=markup)

# –î–æ–¥–∞–π—Ç–µ —Ü—é —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ "–í–∏—Ç—Ä–∞—Ç–∏—Ç–∏ –±–∞–ª–∏"
@bot.callback_query_handler(func=lambda call: call.data == "spend_points")
def spend_points_menu(call):
    show_available_rewards(call.message)


# –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–í—ñ–¥–≥—É–∫–∏ —Ç–∞ —Ä–µ–π—Ç–∏–Ω–≥–∏"
@bot.message_handler(
    func=lambda message: message.text == '‚≠ê –í—ñ–¥–≥—É–∫–∏ —Ç–∞ —Ä–µ–π—Ç–∏–Ω–≥–∏')
def show_reviews_menu(message):
    markup = types.InlineKeyboardMarkup()
    for index, product in enumerate(products):
        button = types.InlineKeyboardButton(
            f"{product['emoji']} {product['name']}",
            callback_data=f"reviews_{index}")
        markup.add(button)
    bot.send_message(message.chat.id,
                     "‚≠ê –û–±–µ—Ä—ñ—Ç—å —Ç–æ–≤–∞—Ä –∞–±–æ –º–∞–≥–∞–∑–∏–Ω –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –≤—ñ–¥–≥—É–∫—ñ–≤:",
                     reply_markup=markup)


# –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —Ç–æ–≤–∞—Ä—É –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –≤—ñ–¥–≥—É–∫—ñ–≤
@bot.callback_query_handler(func=lambda call: call.data.startswith('reviews_'))
def show_product_reviews(call):
    product_index = int(call.data.split('_')[1])
    product = products[product_index]

    if product['name'] not in user_reviews:
        user_reviews[product['name']] = []

    reviews = user_reviews[product['name']]
    response = f"‚≠ê –í—ñ–¥–≥—É–∫–∏ –ø—Ä–æ {product['emoji']} {product['name']}:\n\n"

    if not reviews:
        response += "–ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –≤—ñ–¥–≥—É–∫—ñ–≤. –ë—É–¥—å—Ç–µ –ø–µ—Ä—à–∏–º!"
    else:
        for review in reviews:
            response += f"–û—Ü—ñ–Ω–∫–∞: {review['rating']}/5\n"
            response += f"{review['text']}\n"
            response += f"- {review['user']} ({review['date']})\n\n"

    markup = types.InlineKeyboardMarkup()
    add_review_button = types.InlineKeyboardButton(
        "üìù –î–æ–¥–∞—Ç–∏ –≤—ñ–¥–≥—É–∫", callback_data=f"add_review_{product_index}")
    back_button = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥",
                                             callback_data="back_to_reviews")
    markup.add(add_review_button, back_button)

    bot.edit_message_text(response,
                          call.message.chat.id,
                          call.message.message_id,
                          reply_markup=markup)


# –û–±—Ä–æ–±–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤—ñ–¥–≥—É–∫—É
@bot.callback_query_handler(
    func=lambda call: call.data.startswith('add_review_'))
def add_review(call):
    product_index = int(call.data.split('_')[2])
    product = products[product_index]

    markup = types.InlineKeyboardMarkup()
    for i in range(1, 6):
        markup.add(
            types.InlineKeyboardButton(
                f"–û—Ü—ñ–Ω–∫–∞: {i}", callback_data=f"rate_{product_index}_{i}"))

    bot.edit_message_text(f"–û—Ü—ñ–Ω—ñ—Ç—å {product['emoji']} {product['name']}:",
                          call.message.chat.id,
                          call.message.message_id,
                          reply_markup=markup)


# –û–±—Ä–æ–±–∫–∞ –æ—Ü—ñ–Ω–∫–∏ —Ç–æ–≤–∞—Ä—É
@bot.callback_query_handler(func=lambda call: call.data.startswith('rate_') and
                            not call.data.startswith('rate_store_'))
def handle_product_rating(call):
    _, product_index, rating = call.data.split('_')
    product_index = int(product_index)
    rating = int(rating)
    product = products[product_index]

    if product['name'] not in product_ratings:
        product_ratings[product['name']] = {'total': 0, 'count': 0}

    product_ratings[product['name']]['total'] += rating
    product_ratings[product['name']]['count'] += 1

    bot.answer_callback_query(call.id, f"–í–∏ –æ—Ü—ñ–Ω–∏–ª–∏ —Ç–æ–≤–∞—Ä –Ω–∞ {rating} –∑ 5!")
    bot.send_message(
        call.message.chat.id,
        f"–í–∏ –æ—Ü—ñ–Ω–∏–ª–∏ {product['emoji']} {product['name']} –Ω–∞ {rating} –∑ 5.\n–¢–µ–ø–µ—Ä, –±—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à—ñ—Ç—å –≤–∞—à –≤—ñ–¥–≥—É–∫:"
    )
    bot.register_next_step_handler(call.message, save_product_review,
                                   product['name'], rating)


def save_product_review(message, product_name, rating):
    global user_reviews
    if product_name not in user_reviews:
        user_reviews[product_name] = []

    user_reviews[product_name].append({
        'user':
        message.from_user.first_name,
        'rating':
        rating,
        'text':
        message.text.strip(),
        'date':
        datetime.now().strftime("%Y-%m-%d")
    })

    bot.send_message(message.chat.id,
                     "‚úÖ –î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à –≤—ñ–¥–≥—É–∫! –í—ñ–Ω –¥–æ–ø–æ–º–æ–∂–µ —ñ–Ω—à–∏–º –ø–æ–∫—É–ø—Ü—è–º.")
    show_reviews_menu(message)


@bot.callback_query_handler(func=lambda call: call.data == "back_to_reviews")
def back_to_reviews(call):
    show_reviews_menu(call.message)


# –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü—ñ–¥—Ç—Ä–∏–º–∫–∞"
@bot.message_handler(func=lambda message: message.text == 'üõ†Ô∏è –ü—ñ–¥—Ç—Ä–∏–º–∫–∞')
def support(message):
    markup = types.InlineKeyboardMarkup()
    faq_button = types.InlineKeyboardButton("‚ùì –ß–∞—Å—Ç—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è",
                                            callback_data="faq")
    contact_button = types.InlineKeyboardButton(
        "üë§ –ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é", callback_data="contact_support")
    markup.add(faq_button, contact_button)
    bot.send_message(message.chat.id,
                     "üõ†Ô∏è –ß–∏–º –º–∏ –º–æ–∂–µ–º–æ –≤–∞–º –¥–æ–ø–æ–º–æ–≥—Ç–∏?",
                     reply_markup=markup)


# –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É "–ù–∞—à—ñ –ø–µ—Ä–µ–≤–∞–≥–∏"
@bot.callback_query_handler(func=lambda call: call.data == "faq")
def show_faq(call):
    markup = types.InlineKeyboardMarkup()
    questions = [
        "–ü–µ—Ä–µ–≤–∞–≥–∏", "–û–ø–ª–∞—Ç–∞",
        "–î–æ—Å—Ç–∞–≤–∫–∞"
    ]
    for i, question in enumerate(questions, 1):
        markup.add(
            types.InlineKeyboardButton(f"{i}. {question}",
                                       callback_data=f"faq_{i}"))
    bot.edit_message_text("‚ùì –û–±–µ—Ä—ñ—Ç—å –ø–∏—Ç–∞–Ω–Ω—è, —è–∫–µ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å:",
                          call.message.chat.id,
                          call.message.message_id,
                          reply_markup=markup)


# –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–Ω—è FAQ
@bot.callback_query_handler(func=lambda call: call.data.startswith("faq_"))
def answer_faq(call):
    question_id = int(call.data.split("_")[1])
    answers = {
        1:
       "üì± **–ù–∞—à—ñ –ø–µ—Ä–µ–≤–∞–≥–∏**\n\n–ú–∏ –ø—Ä–æ–ø–æ–Ω—É—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—É —Ç–µ—Ö–Ω—ñ–∫—É Apple –∑ –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–º –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º —Ç–∞ —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–∏–º –ø—ñ–¥—Ö–æ–¥–æ–º. –ö–æ–∂–µ–Ω –ø—Ä–∏—Å—Ç—Ä—ñ–π –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Ä–µ—Ç–µ–ª—å–Ω—É –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –Ω–∞—à–∏–º–∏ –¥–æ—Å–≤—ñ–¥—á–µ–Ω–∏–º–∏ —Ñ–∞—Ö—ñ–≤—Ü—è–º–∏, —â–æ–± –≥–∞—Ä–∞–Ω—Ç—É–≤–∞—Ç–∏ –π–æ–≥–æ –±–µ–∑–¥–æ–≥–∞–Ω–Ω—É —Ä–æ–±–æ—Ç—É –Ω–∞ –Ω–∞–π–≤–∏—â–æ–º—É —Ä—ñ–≤–Ω—ñ. –¢–∞–∫–æ–∂ –º–∏ –±–µ—Ä–µ–º–æ –Ω–∞ —Å–µ–±–µ –ø–µ—Ä—à–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤–∞—à–æ—ó —Ç–µ—Ö–Ω—ñ–∫–∏, –¥–æ–ø–æ–º–∞–≥–∞—é—á–∏ –≤–∞–º —à–≤–∏–¥–∫–æ –ø–æ—á–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –≤—Å—ñ–º–∞ –º–æ–∂–ª–∏–≤–æ—Å—Ç—è–º–∏ –≤–∞—à–æ–≥–æ –ø—Ä–∏—Å—Ç—Ä–æ—é Apple.\n\n**–û—Å–æ–±–ª–∏–≤–∞ –ø–æ—Å–ª—É–≥–∞** ‚Äî —Ä–æ–∑—à–∏—Ä–µ–Ω–∞ –≥–∞—Ä–∞–Ω—Ç—ñ—è –ª–∏—à–µ –∑–∞ 500 –≥—Ä–Ω –Ω–∞ —Ä—ñ–∫. –í–æ–Ω–∞ –≤–∫–ª—é—á–∞—î –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –¥–æ–¥–∞—Ç–∫—ñ–≤, –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—é —Ä–æ–±–æ—Ç–∏ –ø—Ä–∏—Å—Ç—Ä–æ—é —Ç–∞ –≤–∏—Ä—ñ—à–µ–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º –∑ –ø—Ä–æ—à–∏–≤–∫–æ—é.",
        2:
        "üí≥ **–û–ø–ª–∞—Ç–∞**\n\n–ü—Ä–æ—Ü–µ—Å –æ–ø–ª–∞—Ç–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∑—Ä—É—á–Ω–∏–π —Ç–∞ –≥–Ω—É—á–∫–∏–π. –í–∏ –º–æ–∂–µ—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç–∏ –±–∞–Ω–∫—ñ–≤—Å—å–∫–æ—é –∫–∞—Ä—Ç–∫–æ—é –∞–±–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ—é. –¢–∞–∫–æ–∂ –¥–æ—Å—Ç—É–ø–Ω–∞ –æ–ø–ª–∞—Ç–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ: –Ω–∞ –∫–∞—Å—ñ –ø–æ—à—Ç–æ–≤–æ–≥–æ –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è —á–∏ –≤ –Ω–∞—à–æ–º—É –º–∞–≥–∞–∑–∏–Ω—ñ.",
        3:
        "üöö **–î–æ—Å—Ç–∞–≤–∫–∞**\n\n–ú–∏ –ø—Ä–æ–ø–æ–Ω—É—î–º–æ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω—É –¥–æ—Å—Ç–∞–≤–∫—É –ø–æ –≤—Å—ñ–π –£–∫—Ä–∞—ó–Ω—ñ —Ç–∞ –∑–∞ –∫–æ—Ä–¥–æ–Ω. –¢–µ—Ä–º—ñ–Ω –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ –£–∫—Ä–∞—ó–Ω—ñ ‚Äî –≤—ñ–¥ 3 –¥–æ 7 –¥–Ω—ñ–≤, –∞ –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω—å –∑-–∑–∞ –∫–æ—Ä–¥–æ–Ω—É ‚Äî 7-14 –¥–Ω—ñ–≤. –°–ø—ñ–≤–ø—Ä–∞—Ü—é—î–º–æ –∑ Meest, Nova –ü–æ—à—Ç–∞ —Ç–∞ –£–∫—Ä–ø–æ—à—Ç–∞ –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ —Ç–∞ –±–µ–∑–ø–µ—á–Ω–æ–≥–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∞—à–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.",
    }
    markup = types.InlineKeyboardMarkup()
    back_button = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ FAQ",
                                             callback_data="faq")
    contact_button = types.InlineKeyboardButton(
        "üë§ –ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é", callback_data="contact_support")
    markup.add(back_button, contact_button)
    bot.edit_message_text(f"‚ùì {answers[question_id]}",
                          call.message.chat.id,
                          call.message.message_id,
                          reply_markup=markup)


# –û–±—Ä–æ–±–∫–∞ –∑–∞–ø–∏—Ç—É –Ω–∞ –∑–≤'—è–∑–æ–∫ –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é
@bot.callback_query_handler(func=lambda call: call.data == "contact_support")
def contact_support(call):
    markup = types.InlineKeyboardMarkup()
    chat_button = types.InlineKeyboardButton("üí¨ –ß–∞—Ç –∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º",
                                             callback_data="chat_support")
    email_button = types.InlineKeyboardButton("üìß –ù–∞–ø–∏—Å–∞—Ç–∏ –ø–æ–≤—ñ–¥–º–æ–ª–µ–Ω–Ω—è",
                                              callback_data="email_support")
    markup.add(chat_button, email_button)
    bot.edit_message_text("üë§ –í–∏–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –∑–≤'—è–∑–∫—É –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é:",
                          call.message.chat.id,
                          call.message.message_id,
                          reply_markup=markup)


# –û–±—Ä–æ–±–∫–∞ –∑–∞–ø–∏—Ç—É –Ω–∞ —á–∞—Ç –∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º
@bot.callback_query_handler(func=lambda call: call.data == "chat_support")
def chat_with_support(call):
    # –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ª–æ–≥—ñ–∫—É –¥–ª—è –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –∂–∏–≤–∏–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º
    bot.answer_callback_query(
        call.id, "üë®‚Äçüíº –ó–∞—á–µ–∫–∞–π—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞. –ú–∏ –∑'—î–¥–Ω—É—î–º–æ –≤–∞—Å –∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º...")
    bot.send_message(
        call.message.chat.id,
        "üòÇüëå –í—Å—ñ –Ω–∞—à—ñ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∏ –∑–∞–π–Ω—è—Ç—ñ –Ω–∞ –≤—Å—ñ 100%! –í–∏ –º–æ–∂–µ—Ç–µ –∑–≤–µ—Ä–Ω—É—Ç–∏—Å—è –∑–Ω–æ–≤—É ‚Äî –Ω—ñ–∫–æ–ª–∏ üòú! –î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à–µ —Ç–µ—Ä–ø—ñ–Ω–Ω—è! üôè‚ú®")


# –û–±—Ä–æ–±–∫–∞ –∑–∞–ø–∏—Ç—É –Ω–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫—É email
@bot.callback_query_handler(func=lambda call: call.data == "email_support")
def email_support(call):
    bot.send_message(
        call.message.chat.id,
        "üìß –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ –ø—Ä–æ–±–ª–µ–º—É. –ú–∏ –≤—ñ–¥–ø—Ä–∞–≤–∏–º–æ —Ü–µ –Ω–∞ –∞–¥—Ä–µ—Å—É –Ω–∞—à–æ—ó –ø—ñ–¥—Ç—Ä–∏–º–∫–∏."
    )
    bot.register_next_step_handler(call.message, process_email_support)


def process_email_support(message):
    bot.send_message(
        message.chat.id,
        f"üò¥ –í–∏–±–∞—á—Ç–µ, –∞–ª–µ –≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –±—É–¥–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ, –æ—Å–∫—ñ–ª—å–∫–∏ –Ω–∞—à –±–æ—Ç —Ç—Ä–æ—Ö–∏ –≤—Ç–æ–º–∏–≤—Å—è! ü•±‚òï –î—è–∫—É—î–º–æ –∑–∞ —Ä–æ–∑—É–º—ñ–Ω–Ω—è —ñ –≥–∞—Ä–Ω–æ–≥–æ –¥–Ω—è! üòÖ"
    )


# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º)
def send_support_message(user_id, message):
    try:
        bot.send_message(user_id, f"üë®‚Äçüíº –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏: {message}")
        return True
    except telebot.apihelper.ApiException as e:
        if e.result.status_code == 400 and "chat not found" in str(e):
            print(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π –∞–±–æ –∑–∞–±–ª–æ–∫—É–≤–∞–≤ –±–æ—Ç–∞.")
        else:
            print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏: {e}")
        return False
    except Exception as e:
        print(f"–ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏: {e}")
        return False

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞, —â–æ–± –¥–æ–¥–∞—Ç–∏ –±–∞–ª–∏ –ª–æ—è–ª—å–Ω–æ—Å—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
@bot.message_handler(commands=['add_points'])
def admin_add_points(message):
    if message.from_user.id != support_user_id:
        bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return

    try:
        _, user_id, points = message.text.split()
        user_id = int(user_id)
        points = int(points)
        
        if user_id not in loyalty_points:
            loyalty_points[user_id] = 0
        
        loyalty_points[user_id] += points
        
        bot.reply_to(message, f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id} —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ {points} –±–∞–ª—ñ–≤ –ª–æ—è–ª—å–Ω–æ—Å—Ç—ñ. –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –±–∞–ª—ñ–≤: {loyalty_points[user_id]}")
        
        # –°–ø—Ä–æ–±—É—î–º–æ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –ø—Ä–æ –Ω–∞—Ä–∞—Ö–æ–≤–∞–Ω—ñ –±–∞–ª–∏
        try:
            bot.send_message(user_id, f"üéâ –í—ñ—Ç–∞—î–º–æ! –í–∞–º –±—É–ª–æ –Ω–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ {points} –±–∞–ª—ñ–≤ –ª–æ—è–ª—å–Ω–æ—Å—Ç—ñ. –í–∞—à –∑–∞–≥–∞–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å: {loyalty_points[user_id]} –±–∞–ª—ñ–≤.")
        except Exception as e:
            bot.reply_to(message, f"‚ö†Ô∏è –ë–∞–ª–∏ –Ω–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ, –∞–ª–µ –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É. –ü–æ–º–∏–ª–∫–∞: {str(e)}")
        
    except ValueError:
        bot.reply_to(message, "‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /add_points [user_id] [–∫—ñ–ª—å–∫—ñ—Å—Ç—å_–±–∞–ª—ñ–≤]")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –±–∞–ª—ñ–≤: {str(e)}")
        
# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞, —â–æ–± –≤—ñ–¥–Ω—è—Ç–∏ –±–∞–ª–∏ –ª–æ—è–ª—å–Ω–æ—Å—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
@bot.message_handler(commands=['remove_points'])
def admin_add_points(message):
    if message.from_user.id != support_user_id:
        bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return

    try:
        _, user_id, points = message.text.split()
        user_id = int(user_id)
        points = int(points)
        
        if user_id not in loyalty_points:
            loyalty_points[user_id] = 0
        
        loyalty_points[user_id] -= points
        
        bot.reply_to(message, f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id} —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ {points} –±–∞–ª—ñ–≤ –ª–æ—è–ª—å–Ω–æ—Å—Ç—ñ. –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –±–∞–ª—ñ–≤: {loyalty_points[user_id]}")
        
        # –°–ø—Ä–æ–±—É—î–º–æ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –ø—Ä–æ –Ω–∞—Ä–∞—Ö–æ–≤–∞–Ω—ñ –±–∞–ª–∏
        try:
            bot.send_message(user_id, f"üéâ –°–ø—ñ–≤—á—É–≤–∞—î–º–æ! –£ –í–∞—Å –±—É–ª–æ –≤–∏–¥–∞–ª–µ–Ω–æ {points} –±–∞–ª—ñ–≤ –ª–æ—è–ª—å–Ω–æ—Å—Ç—ñ. –í–∞—à –∑–∞–≥–∞–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å: {loyalty_points[user_id]} –±–∞–ª—ñ–≤.")
        except Exception as e:
            bot.reply_to(message, f"‚ö†Ô∏è –ë–∞–ª–∏ –≤–∏–¥–∞–ª–µ–Ω–æ, –∞–ª–µ –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É. –ü–æ–º–∏–ª–∫–∞: {str(e)}")
        
    except ValueError:
        bot.reply_to(message, "‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /remove_points [user_id] [–∫—ñ–ª—å–∫—ñ—Å—Ç—å_–±–∞–ª—ñ–≤]")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –±–∞–ª—ñ–≤: {str(e)}")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞, —â–æ–± –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
@bot.message_handler(commands=['reply'])
def admin_reply(message):
    if message.from_user.id != support_user_id:
        bot.reply_to(message,
                     "‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return

    try:
        _, user_id, *text = message.text.split()
        user_id = int(user_id)
        reply_text = " ".join(text)
        if send_support_message(user_id, reply_text):
            bot.reply_to(
                message,
                f"‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}")
        else:
            bot.reply_to(
                message,
                f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}")
    except ValueError:
        bot.reply_to(
            message,
            "‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /reply [user_id] [—Ç–µ–∫—Å—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ]"
        )

# –ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥
@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.reply_to(message, "Welcome! Bot is active.")
    
    
    
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling
if __name__ == "__main__":
    try:
        bot.polling(none_stop=True)
    except KeyboardInterrupt:
        print("Bot stopped manually.")
